public String intToRoman( int num )
	{
		StringBuffer sb = new StringBuffer( );
		int result = num;
		int numberl = String.valueOf( num ).length( );
		HashMap< String, String > map = new HashMap< String, String >( );
		map.put( "1", "I" );
		map.put( "5", "V" );
		map.put( "10", "X" );
		map.put( "50", "L" );
		map.put( "100", "C" );
		map.put( "500", "D" );
		map.put( "1000", "M" );
		
		if ( map.containsKey( String.valueOf( num ) ) ) return map.get( String.valueOf( num ) );
		
		for ( int i = 0; i < numberl; i++ )
		{
			int key = ( int ) Math.pow( 10, i + 1 );
			result %= 10;
			
			if ( i == 0 )
			{
				if ( result == 9 )
				{
					sb.append( map.get( "10" ) );
					sb.append( map.get( "1" ) );
				} else if ( result == 4 )
				{
					sb.append( map.get( "5" ) );
					sb.append( map.get( "1" ) );
					
				} else if ( result - 5 >= 0 )
				{
					while ( result != 5 )
					{
						sb.append( map.get( "1" ) );
						result--;
					}
					sb.append( map.get( "5" ) );
				} else
				{
					while ( result != 0 )
					{
						sb.append( map.get( "1" ) );
						result--;
					}
				}
			} else
			{
				if ( result == 9 )
				{
					sb.append( map.get( String.valueOf( key ) ) );
					sb.append( map.get( String.valueOf( key / 10 ) ) );
				} else if ( result == 4 )
				{
					sb.append( map.get( String.valueOf( key / 2 ) ) );
					sb.append( map.get( String.valueOf( key / 10 ) ) );
					
				} else if ( result - 5 >= 0 )
				{
					while ( result != 5 )
					{
						sb.append( map.get( String.valueOf( key / 10 ) ) );
						result--;
					}
					sb.append( map.get( String.valueOf( key / 2 ) ) );
				} else
				{
					while ( result != 0 )
					{
						sb.append( map.get( String.valueOf( key / 10 ) ) );
						result--;
					}
				}
			}
			
			result = num / key;
		}
		return sb.reverse( ).toString( );
	}